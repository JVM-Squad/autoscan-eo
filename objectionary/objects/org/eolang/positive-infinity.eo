# The MIT License (MIT)
#
#  2016-2022 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang
+rt jvm org.eolang:eo-runtime:0.29.1
+version 0.29.1

# Positive infinity
[] > positive-infinity
  1.0.div 0.0 > @!

  # Tests that $ = x
  [x] > eq
    eq. > @
      ^.as-bytes
      x.as-bytes

  # Tests that $ < x
  [x] > lt
    FALSE > @

  # Tests that $ â‰¤ x
  [x] > lte
    ^.eq x > @

  # Tests that $ > x
  [x] > gt
    not. > @
      or.
        x.as-bytes.eq (nan.as-bytes)
        ^.eq x

  # Tests that $ â‰¥ x
  [x] > gte
    not. > @
      eq.
        x.as-bytes
        nan.as-bytes

  # Multiplication of $ and x
  # @todo #1806:30min. Make positive-infinity.times and negative-infinity.times
  #  worked with multiple arguments without using objects from eo-collections.
  #  See positive-infinity.plus and negative-infinity.plus as an example
  [x...] > times
    x.at 0 > first!
    if. > @
      or.
        first.as-bytes.eq (nan.as-bytes)
        first.eq 0.0
        first.eq 0
      nan
      if.
        first.eq negative-infinity
        negative-infinity
        ^

  # Sum of $ and x
  [x...] > plus
    negative-infinity.as-bytes > neg-inf-as-bytes!

    [acc index terms check-term] > plus-rec
      if. > @
        index.eq terms.length
        acc
        if.
          check-term
            terms.at index
          nan
          plus-rec
            acc
            index.plus 1
            terms
            check-term

    [term] > check-term
      term > t!
      or. > @
        not.
          t.eq t
        t.as-bytes.eq neg-inf-as-bytes

    if. > @
      eq.
        x.length > terms-count!
        0
      ^
      if.
        terms-count.gt 1
        plus-rec
          ^
          0
          x
          check-term
        if.
          check-term
            x.at 0
          nan
          ^

  # Negation of $
  [] > neg
    negative-infinity > @

  # Difference between $ and x
  # @todo #1806:30min. Make positive-infinity.minus and negative-infinity.minus
  #  worked with multiple arguments without using objects from eo-collections.
  #  See positive-infinity.plus and negative-infinity.plus as an example
  [x...] > minus
    ^.plus ((x.at 0).neg) > @

  # Quotient of the division of $ by x
  # @todo #1806:30min. Make positive-infinity.div and negative-infinity.div
  #  worked with multiple arguments without using objects from eo-collections.
  #  See positive-infinity.plus and negative-infinity.plus as an example
  [x...] > div
    x.at 0 > first!
    if. > @
      or.
        first.as-bytes.eq (nan.as-bytes)
        first.eq negative-infinity
        first.eq ^
      nan
      ^

  # Converts this to bytes
  [] > as-bytes
    ^.@.as-bytes > @
