# The MIT License (MIT)
#
# Copyright (c) 2016-2022 Yegor Bugayenko
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+package org.eolang
+alias org.eolang.io.stdout
+alias org.eolang.txt.sprintf
+alias org.eolang.hamcrest.assert-that
+junit

[] > converts-to-string
  assert-that > @
    eq.
      "42"
      42.as-string
    $.equal-to TRUE
    "converts int to string"

[] > less-true
  assert-that > @
    less.
      10
      50
    $.equal-to TRUE
    "check int.less"

[] > less-equal
  assert-that > @
    not.
      less.
        10
        10
    $.equal-to TRUE
    "check int.less.not equal"

[] > less-false
  assert-that > @
    not.
      less.
        10
        -5
    $.equal-to TRUE
    "check int.less.not less"

[] > greater-true
  assert-that > @
    greater.
      -200
      -1000
    $.equal-to TRUE
    "check int.greater"

[] > greater-false
  assert-that > @
    not.
      greater.
        0
        100
    $.equal-to TRUE
    "check int.greater.not"

[] > greater-equal
  assert-that > @
    not.
      greater.
        0
        0
    $.equal-to TRUE
    "check int.greater.not zero"

[] > leq-true
  assert-that > @
    leq.
      -200
      -100
    $.equal-to TRUE
    "check int.leq"

[] > leq-equal
  assert-that > @
    leq.
      50
      50
    $.equal-to TRUE
    "check int.leq equal"

[] > leq-false
  assert-that > @
    not.
      leq.
        0
        -10
    $.equal-to TRUE
    "check int.leq.not"

[] > geq-true
  assert-that > @
    geq.
      -1000
      -1100
    $.equal-to TRUE
    "check int.geq negative int"

[] > geq-equal
  assert-that > @
    geq.
      113
      113
    $.equal-to TRUE
    "check int.geq positive int"

[] > geq-false
  assert-that > @
    not.
      geq.
        0
        10
    $.equal-to TRUE
    "check int.geq.not"

[] > eq-true
  assert-that > @
    eq.
      123
      123
    $.equal-to TRUE
    "check int.eq"

[] > eq-false
  assert-that > @
    not.
      eq.
        123
        42
    $.equal-to TRUE
    "check int.eq.not"

[] > compares-two-different-types
  assert-that > @
    not.
      eq.
        42
        "Hello!"
    $.equal-to TRUE
    "check int.eq.not string"

[] > neq-true
  assert-that > @
    neq.
      123
      125
    $.equal-to TRUE
    "check int.neq"

[] > neq-false
  assert-that > @
    not.
      neq.
        -133
        -133
    $.equal-to TRUE
    "check int.neq.not negative"

[] > calculates-fibonacci-number-with-recursion
  eq. > @
    3
    fibo 4
  [n] > fibo
    if. > @
      n.less 3
      1
      add.
        fibo (n.sub 1)
        fibo (n.sub 2)

[] > calculates-fibonacci-number-with-tail
  assert-that > @
    fibonacci 4
    $.equal-to 3
    "calculates fibonacci number with tail "
  [n] > fibonacci
    if. > @
      n.less 3
      small n
      rec n 1 1
    [n] > small
      if. > @
        n.eq 2
        1
        n
    [n minus1 minus2] > rec
      if. > @
        n.eq 3
        minus1.add minus2
        rec (n.sub 1) (minus1.add minus2) minus1

# Checks that division by zero returns an error object
[] > zero-division
  assert-that > @
    (2.div 0).msg
    $.equal-to
      "Division by zero is undefined"

# Checks mathematical equality
# A = ((A div B) * B) + (A mod B)
[] > div-mod-compatibility
  -13 > dividend
  5 > divisor
  dividend.mod divisor > remainder
  dividend.div divisor > quotient
  assert-that > @
    add.
      remainder
      mul.
        divisor
        quotient
    $.equal-to
      dividend

# Checks Euclid's division lemma
# A = B * Q + R
# and 0 <= R <= |B|
[] > euclids-mod-lemma
  * -201 -201 201 201 > dividends
  * -25 25 -25 25 > divisors
  [x y] > remainder
    x.mod y > @
  [x y] > quotient
    x.div y > @
  [dividend divisor] > euclids-lemma
    eq. > @
      dividend
      add.
        divisor.mul
          quotient dividend divisor
        remainder dividend divisor
  reducei. > @
    dividends
    TRUE
    [a i el]
      and. > @
        euclids-lemma
          el
          divisors.get i
        a

# Checks modulo: dividend < divisor
[] > mod-dividend-less-than-divisor
  assert-that > @
    -1.mod 5
    $.equal-to -1

# Checks modulo by 1
[] > mod-dividend-by-one
  assert-that > @
    133.mod 1
    $.equal-to 0

# Checks that division by one returns the dividend
[] > division-by-one
  -235 > dividend
  assert-that > @
    dividend.div 1
    $.equal-to
      dividend

# Checks that div works properly with dividends greater than zero
[] > div-for-dividend-greater-than-zero
  assert-that > @
    256.div 16
    $.equal-to 16

# Checks div with remainder
[] > div-with-remainder
  assert-that > @
    13.div -5
    $.equal-to -2

# Checks that int.as-float works properly
[] > as-float-works
  assert-that > @
    17.neg.as-float
    $.equal-to -17.0

[] > abs-positive
  assert-that > @
    3.abs
    $.equal-to 3

[] > abs-negative
  assert-that > @
    -3.abs
    $.equal-to 3

[] > abs-zero
  assert-that > @
    0.abs
    $.equal-to 0

[] > to-bytes-and-backwards
  assert-that > @
    as-int.
      as-bytes.
        42
    $.equal-to 42

[] > as-bytes-equals-to-int
  assert-that > @
    42
    $.equal-to
      42.as-bytes

[] > as-bytes-equals-to-int-backwards
  assert-that > @
    42.as-bytes
    $.equal-to 42

[] > xor-3-6
  assert-that > @
    3.xor 6
    $.equal-to 5

[] > left-1-2
  assert-that > @
    1.left 2
    $.equal-to 4

[] > right-8-2
  assert-that > @
    8.right 2
    $.equal-to 2

[] > as-hash-equals-to-similar-values
  assert-that > @
    42.as-hash
    $.equal-to
      42.as-hash

# We can have collisions, so in this test just check if values not similar
[] > as-hash-have-different-hashes
  seq > @
    stdout
      sprintf
        "%d %d %d\n"
        41.as-hash
        42.as-hash
        43.as-hash
    TRUE

[] > as-hash-not-equal
  assert-that > @
    41.as-hash
    $.not
      $.equal-to
        42.as-hash

[] > or-1-2
  assert-that > @
    1.or 2
    $.equal-to 3

[] > and-3-6
  assert-that > @
    3.and 6
    $.equal-to 2

[] > mod-1-2
  assert-that > @
    1.mod 2
    $.equal-to 1

[] > mod-0-5
  assert-that > @
    0.mod 5
    $.equal-to 0

[] > mod-0-15-neg
  assert-that > @
    0.mod -15
    $.equal-to 0

[] > mod-1-neg-7
  assert-that > @
    -1.mod 7
    $.equal-to -1

[] > mod-16-200-neg
  assert-that > @
    16.mod -200
    $.equal-to 16